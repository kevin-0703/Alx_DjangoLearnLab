"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-y%nwfr!w+xd1&q_h5f%8yecy&5ei+*j^e*(or6)^0qkkw43hr^"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

ALLOWED_HOSTS = []
# SECURITY: Redirect all HTTP requests to HTTPS
SECURE_SSL_REDIRECT = True  # Ensures all connections use HTTPS

# SECURITY: Use HSTS to enforce HTTPS in the browser
SECURE_HSTS_SECONDS = 31536000  # One year in seconds
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Apply to all subdomains
SECURE_HSTS_PRELOAD = True  # Allow site to be added to browser preload lists
# SECURITY: Ensure cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True  # Secure session cookies
CSRF_COOKIE_SECURE = True     # Secure CSRF cookies
# SECURITY HEADERS

# Prevent browsers from MIME-sniffing the content type
SECURE_CONTENT_TYPE_NOSNIFF = True

# Enable the browserâ€™s built-in XSS filter
SECURE_BROWSER_XSS_FILTER = True

# Prevent the site from being embedded in iframes (anti-clickjacking)
X_FRAME_OPTIONS = "DENY"
server {
    listen 80;
    server_name yourdomain.com;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name yourdomain.com;

    ssl_certificate /etc/ssl/certs/your_cert.pem;
    ssl_certificate_key /etc/ssl/private/your_key.pem;

    # Django app proxy setup here
    location / {
        proxy_pass http://localhost:8000;
        include proxy_params;
    }
}

"""
Security Enhancements for HTTPS:

- SECURE_SSL_REDIRECT: Forces all traffic to HTTPS
- SECURE_HSTS_SECONDS: Enforces HTTPS in the browser for 1 year
- SECURE_HSTS_INCLUDE_SUBDOMAINS: Applies the HSTS rule to all subdomains
- SECURE_HSTS_PRELOAD: Requests browser vendors to preload HTTPS for your domain
- SESSION_COOKIE_SECURE: Ensures session cookies are transmitted securely
- CSRF_COOKIE_SECURE: Ensures CSRF cookies are transmitted securely
- SECURE_CONTENT_TYPE_NOSNIFF: Prevents MIME-sniffing attacks
- SECURE_BROWSER_XSS_FILTER: Activates browser XSS filters
- X_FRAME_OPTIONS: Prevents clickjacking by disallowing framing
"""




# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "relationship_app",
    "bookshelf",
]
AUTH_USER_MODEL = "bookshelf.CustomUser"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'csp.middleware.CSPMiddleware',
]

ROOT_URLCONF = "LibraryProject.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'relationship_app/templates'],  # OR whatever your template folder is
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = "LibraryProject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
'DIRS': [BASE_DIR / 'relationship_app/templates'],

AUTH_USER_MODEL = 'relationship_app.CustomUser'  # or 'accounts.CustomUser' if you put it there
